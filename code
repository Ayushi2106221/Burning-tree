class Solution {
  public:
  //create node to parent mapping and return the target node
  Node* createNodeToParentMapping(Node *root, int target,map<Node*, Node*>&nodetoparent ){
      Node *targetnode=NULL;
      queue<Node*>q;
      q.push(root);
      nodetoparent[root]=NULL;
      while(!q.empty()){
          Node *frontnode=q.front();
          q.pop();
          if(frontnode->data==target){
              targetnode=frontnode;
          }
          if(frontnode->left){
              nodetoparent[frontnode->left]=frontnode;
              q.push(frontnode->left);
          }
           if(frontnode->right){
              nodetoparent[frontnode->right]=frontnode;
              q.push(frontnode->right);
          }
          
      }
      return targetnode;
  }
  
  int burntree(Node *target,map<Node*, Node*>&nodetoparent){
      //this is what i need to return
      int time=0;
      
      map<Node*,bool>visited;
      queue<Node*>q;
      Node *root=target;
      q.push(root);
      visited[root]=true;
      while(!q.empty()){
          int size=q.size();
          bool flag=0;
          for(int i=0;i<size;i++){
              Node *front=q.front();
              q.pop();
              if(front->left!=NULL && visited[front->left]!=true){
                  flag=1;
                  q.push(front->left);
                  visited[front->left]=true;
              }
              if(front->right!=NULL && visited[front->right]!=true){
                  flag=1;
                  q.push(front->right);
                  visited[front->right]=true;
              }
              if(nodetoparent[front]!=NULL && visited[nodetoparent[front]]!=true){
                   flag=1;
                  q.push(nodetoparent[front]);
                  visited[nodetoparent[front]]=true;
              }
          }
          if(flag==1) time++;
         
      }
      return time;
  
  }
    int minTime(Node* root, int target) 
    {
        map<Node*, Node*>nodetoparent;
        Node* targetnode=createNodeToParentMapping(root,target, nodetoparent);
        int ans=burntree(targetnode,nodetoparent);
        return ans;
        
    }
};
